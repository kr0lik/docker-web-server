version: '3'

services:
    nginx:
        container_name: my-web-nginx
        image: nginx:alpine
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./docker/images/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./docker/images/nginx/conf.d:/etc/nginx/conf.d
            - ./docker/images/nginx/ssl:/etc/nginx/ssl
            - ./projects-php:/projects
            - ./projects-js:/usr/share/nginx/html
            - ./logs:/var/log/www
        depends_on:
          - php
        restart: always
    php:
        container_name: my-web-php
        build: "./docker/images/php"
        volumes:
            - ./projects-php:/projects
            - ./logs:/var/log/www
        env_file:
            - .env
        restart: always
    go:
        container_name: my-web-go
        image: golang:alpine
        volumes:
            - ./projects-golang:/go/app
            - ./logs:/logs
        working_dir: /go/app
        ports:
            - "90:80"
        environment:
            PORT: 80
        command: go run test/main.go >> /logs/go.log
    mysql:
        container_name: my-web-mysql
        image: yobasystems/alpine-mariadb
        ports:
            - "3306:3306"
        volumes:
            - ./docker/images/mysql/my.cnf:/etc/my.cnf.d/my.cnf
            - ./docker/images/mysql/bin/:/scripts/pre-exec.d/
            - mysqldata:/var/lib/mysql
            - ./logs:/var/log/www
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_ROOT_HOST: '%'
        restart: always
    pgsql:
        container_name: my-web-pgsql
        build: "./docker/images/pgsql"
        ports:
            - "5432:5432"
        volumes:
            - pgsqldata:/var/lib/postgresql/data
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres
            TZ: "Europe/Moscow"
            PGTZ: "Europe/Moscow"
            restart: always
        restart: always
    adminer:
        container_name: my-web-adminer
        image: adminer
        ports:
            - "7000:8080"
        environment:
            ADMINER_PLUGINS: tables-filter table-structure table-indexes-structure struct-comments json-column enum-types enum-option edit-foreign dump-zip tinymce
            TZ: "Europe/Moscow"
        restart: always
    redis:
        container_name: my-web-redis
        image: redis:alpine
        ports:
            - "6379:6379"
        volumes:
            - ./docker/data/redis:/data
        environment:
            TZ: "Europe/Moscow"
        restart: always
#    redisui:
#        container_name: my-web-redis-ui
#        image: rediscommander/redis-commander
#        environment:
#            - REDIS_HOSTS=local:redis:6379
#        ports:
#            - "8081:8081"
#        restart: always
    memcached:
        container_name: my-web-memcached
        image: memcached:alpine
        ports:
            - "11211:11211"
        restart: always
    rabbitmq:
        container_name: my-web-rabbitmq
        image: rabbitmq:management-alpine
        environment:
            RABBITMQ_DEFAULT_USER: rabbitmq
            RABBITMQ_DEFAULT_PASS: rabbitmq
            RABBITMQ_DEFAULT_VHOST: /
        ports:
            - "15672:15672"
            - "5672:5672"
        restart: always
#    elasticsearch:
#        container_name: my-web-elasticsearch
#        image: blacktop/elasticsearch
#        ports:
#            - "9200:9200"
#        restart: always
#    kibana:
#        container_name: my-web-kibana
#        image: blacktop/kibana
#        depends_on:
#            - elasticsearch
#        links:
#            - elasticsearch
#        environment:
#            KIBANA_ELASTICSEARCH_USERNAME: kibana
#            KIBANA_ELASTICSEARCH_PASSWORD: kibana
#        ports:
#            - "5601:5601"
#        restart: always
#    nodejs:
#        container_name: my-web-nodejs
#        image: node:alpine
#        volumes:
#            - ./projects-node:/app
#        working_dir: /app
    portainer:
        container_name: my-web-portainer
        image: portainer/portainer
        command: -H unix:///var/run/docker.sock
        restart: always
        ports:
            - "9000:9000"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./docker/data/portainer:/data

# For postgres on wsl
volumes:
    pgsqldata:
        driver: local
    mysqldata:
        driver: local
